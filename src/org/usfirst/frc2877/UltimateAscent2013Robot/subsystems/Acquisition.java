// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2877.UltimateAscent2013Robot.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2877.UltimateAscent2013Robot.Robot;
import org.usfirst.frc2877.UltimateAscent2013Robot.RobotMap;


/**
 *
 */
public class Acquisition extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Relay acquisitionRoller = RobotMap.acquisitionAcquisitionRoller;
    CANJaguar acquisitionScrewlift = RobotMap.acquisitionAcquisitionScrewlift;
//    Encoder acquisitionScrewEncoder = RobotMap.acquisitionAcquisitionScrewEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public DigitalInput rotaryLimitSwitch = RobotMap.acquisitionRotaryLimitSwitch;
    // Define how many slots that can hold disks
    public static final int NUMPOSITIONS = 4;
    // Initialize the local variables
    public int lowestDisk = 4;
    public int highestDisk = -1;
    public int numDisks = 0;
    // TODO: set this threshold once we can measure it
    public static double threshold = 1.5;
    private static AnalogChannel[] infraRedSensor = new AnalogChannel[NUMPOSITIONS];
    private static double[] sensorValues = new double[NUMPOSITIONS];
    public static final double ACQUISITIONSPEED = 1;
    public static final double SHOOTLOADSPEED = .5;
    
    // diskPositions is what we think the current disk positions are
    public static boolean[] diskPositions = new boolean[NUMPOSITIONS];
    // diskPositions candidate is where the sensors tell us the disks are now
    public static boolean[] diskPositionsCandidate = new boolean[NUMPOSITIONS];
    // we have two arrays so we can check for anamolies -- disks that disappear
    // or appear where they shouldn't be
    
    public AcquisitionState acquisitionState = AcquisitionState.SHOOT;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void Acquisition()
    {
        
        for (int i=0; i!=NUMPOSITIONS; i++)
        {
            infraRedSensor[i] = new AnalogChannel(i+1);
            sensorValues[i] = 0.0;
            diskPositions[i] = false;
            diskPositionsCandidate[i] = false;
        }
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        System.out.println("Disk Acquision initDefaultCommand called.");
    }
    
    public void refreshValues()
    {
        // This temp variable is only in scop within this method
        // As we go through the loop, we'll increment this value and then at
        // the end, we'll compare it to what we had last time to see if it
        // changed.
        int tempNumDisks = 0;
        // Similarly for lowestDisk and highestDisk
        int tempLowestDisk = 4;
        int tempHighestDisk = 0;
       /* for (int i=0; i!=NUMPOSITIONS; i++)
        {
           sensorValues[i] = infraRedSensor[i].getVoltage();
           diskPositionsCandidate[i] = (sensorValues[i] > threshold);
           if (diskPositionsCandidate[i]) {
               if (i < tempLowestDisk) {
                   tempLowestDisk = i;
               }
               if (i > tempHighestDisk) {
                   tempHighestDisk = i;
               }
               tempNumDisks++;
           }
        } */
        // Check to see if the value changed.  If it did, update the SmartDashboard
        if (tempNumDisks != numDisks) {
            numDisks = tempNumDisks;
            SmartDashboard.putNumber("Number of Disks Loaded: ", numDisks);
        }
        if (tempLowestDisk != lowestDisk) {
            lowestDisk = tempLowestDisk;
            SmartDashboard.putNumber("Level of Lowest Frisbee: ", lowestDisk);
        }
        if (tempHighestDisk != highestDisk) {
            highestDisk = tempHighestDisk;
            SmartDashboard.putNumber("Level of Highest Frisbee: ", highestDisk);
        }
    }

    public void acquisitionTurnScrews(double run)
    {
            try {
            acquisitionScrewlift.setX(run);
            } catch (CANTimeoutException ex) {
            System.out.println("Timeout Exception on acquisitionScrewlift.setX in acquisitionOverride");
            }
    }
}